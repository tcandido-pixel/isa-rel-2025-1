{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"In\u00edcio Sou aluno do IFRN campus Parnamirim .","title":"In\u00edcio"},{"location":"#inicio","text":"Sou aluno do IFRN campus Parnamirim .","title":"In\u00edcio"},{"location":"apt/","text":"apt apt 2.8.3 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). This APT has Super Cow Powers.","title":"apt"},{"location":"apt/#apt","text":"apt 2.8.3 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). This APT has Super Cow Powers.","title":"apt"},{"location":"git/","text":"git usage: git [-v | --version] [-h | --help] [-C ] [-c = ] [--exec-path[= ]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch] [--no-optional-locks] [--no-advice] [--bare] [--git-dir= ] [--work-tree= ] [--namespace= ] [--config-env= = ] [ ] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history backfill Download missing objects in a partial clone branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help ' or 'git help ' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"git"},{"location":"git/#git","text":"usage: git [-v | --version] [-h | --help] [-C ] [-c = ] [--exec-path[= ]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch] [--no-optional-locks] [--no-advice] [--bare] [--git-dir= ] [--work-tree= ] [--namespace= ] [--config-env= = ] [ ] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history backfill Download missing objects in a partial clone branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help ' or 'git help ' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"git"},{"location":"mkdocs/","text":"mkdocs Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output --color / --no-color Force enable or disable color and wrapping for the output. Default is auto-detect. -h, --help Show this message and exit. Commands: build Build the MkDocs documentation get-deps Show required PyPI packages inferred from plugins in mkdocs.yml gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server","title":"mkdocs"},{"location":"mkdocs/#mkdocs","text":"Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output --color / --no-color Force enable or disable color and wrapping for the output. Default is auto-detect. -h, --help Show this message and exit. Commands: build Build the MkDocs documentation get-deps Show required PyPI packages inferred from plugins in mkdocs.yml gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server","title":"mkdocs"},{"location":"comandos/apt/","text":"adduser adduser User addition utility. More information: https://manned.org/adduser. - Create a new user with a default home directory and prompt the user to set a password: adduser username - Create a new user without a home directory: adduser --no-create-home username - Create a new user with a home directory at the specified path: adduser --home path/to/home username - Create a new user with the specified shell set as the login shell: adduser --shell path/to/shell username - Create a new user belonging to the specified group: adduser --ingroup group username apt apt 2.6.1 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). Este APT tem Poderes de Super Vaca. cd cd Change the current working directory. More information: https://manned.org/cd. - Go to the specified directory: cd path/to/directory - Go up to the parent of the current directory: cd .. - Go to the home directory of the current user: cd - Go to the home directory of the specified user: cd ~username - Go to the previously chosen directory: cd - - Go to the root directory: cd / chgrp chgrp Change group ownership of files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/chgrp-invocation.html. - Change the owner group of a file/directory: chgrp group path/to/file_or_directory - Recursively change the owner group of a directory and its contents: chgrp [-R|--recursive] group path/to/directory - Change the owner group of a symbolic link: chgrp [-h|--no-dereference] group path/to/symlink - Change the owner group of a file/directory to match a reference file: chgrp --reference path/to/reference_file path/to/file_or_directory chmod chmod Change the access permissions of a file or directory. More information: https://www.gnu.org/software/coreutils/manual/html_node/chmod-invocation.html. - Give the [u]ser who owns a file the right to e[x]ecute it: chmod u+x path/to/file - Give the [u]ser rights to [r]ead and [w]rite to a file/directory: chmod u+rw path/to/file_or_directory - Remove e[x]ecutable rights from the [g]roup: chmod g-x path/to/file - Give [a]ll users rights to [r]ead and e[x]ecute: chmod a+rx path/to/file - Give [o]thers (not in the file owner's group) the same rights as the [g]roup: chmod o=g path/to/file - Remove all rights from [o]thers: chmod o= path/to/file - Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite: chmod [-R|--recursive] g+w,o+w path/to/directory - Recursively give [a]ll users [r]ead permissions to files and e[X]ecute permissions to sub-directories within a directory: chmod [-R|--recursive] a+rX path/to/directory chown chown Change user and group ownership of files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/chown-invocation.html. - Change the owner user of a file/directory: chown user path/to/file_or_directory - Change the owner user and group of a file/directory: chown user:group path/to/file_or_directory - Change the owner user and group to both have the name user: chown user: path/to/file_or_directory - Recursively change the owner of a directory and its contents: chown [-R|--recursive] user path/to/directory - Change the owner of a symbolic link: chown [-h|--no-dereference] user path/to/symlink - Change the owner of a file/directory to match a reference file: chown --reference path/to/reference_file path/to/file_or_directory cp cp Copy files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html. - Copy a file to another location: cp path/to/source_file.ext path/to/target_file.ext - Copy a file into another directory, keeping the filename: cp path/to/source_file.ext path/to/target_parent_directory - Recursively copy a directory's contents to another location (if the destination exists, the directory i> cp [-r|--recursive] path/to/source_directory path/to/target_directory - Copy a directory recursively, in verbose mode (shows files as they are copied): cp [-vr|--verbose --recursive] path/to/source_directory path/to/target_directory - Copy multiple files at once to a directory: cp [-t|--target-directory] path/to/destination_directory path/to/file1 path/to/file2 ... - Copy all files with a specific extension to another location, in interactive mode (prompts user before > cp [-i|--interactive] *.ext path/to/target_directory - Follow symbolic links before copying: cp [-L|--dereference] link path/to/target_directory - Use the full path of source files, creating any missing intermediate directories when copying: cp --parents source/path/to/file path/to/target_file ls ls List directory contents. More information: https://www.gnu.org/software/coreutils/manual/html_node/ls-invocation.html. - List files one per line: ls -1 - List all files, including hidden files: ls [-a|--all] - List files with a trailing symbol to indicate file type (directory/, symbolic_link@, executable*, ...): ls [-F|--classify] - List all files in [l]ong format (permissions, ownership, size, and modification date): ls [-la|-l --all] - List files in [l]ong format with size displayed using human-readable units (KiB, MiB, GiB): ls [-lh|-l --human-readable] - List files in [l]ong format, sorted by [S]ize (descending) recursively: ls [-lSR|-lS --recursive] - List files in [l]ong format, sorted by [t]ime the file was modified and in reverse order (oldest first): ls [-ltr|-lt --reverse] - Only list directories: ls [-d|--directory] */ mkdir mkdir Create directories and set their permissions. More information: https://www.gnu.org/software/coreutils/manual/html_node/mkdir-invocation.html. - Create specific directories: mkdir path/to/directory1 path/to/directory2 ... - Create specific directories and their parents if needed: mkdir [-p|--parents] path/to/directory1 path/to/directory2 ... - Create directories with specific permissions: mkdir [-m|--mode] rwxrw-r-- path/to/directory1 path/to/directory2 ... - Create multiple nested directories recursively: mkdir [-p|--parents] {{path/to/{a,b}/{x,y,z}/{h,i,j}}} rm rm Remove files or directories. See also: rmdir. More information: https://www.gnu.org/software/coreutils/manual/html_node/rm-invocation.html. - Remove specific files: rm path/to/file1 path/to/file2 ... - Remove specific files ignoring nonexistent ones: rm [-f|--force] path/to/file1 path/to/file2 ... - Remove specific files interactively prompting before each removal: rm [-i|--interactive] path/to/file1 path/to/file2 ... - Remove specific files printing info about each removal: rm [-v|--verbose] path/to/file1 path/to/file2 ... - Remove specific files and directories recursively: rm [-r|--recursive] path/to/file_or_directory1 path/to/file_or_directory2 ... - Remove empty directories (this is considered the safe method): rm [-d|--dir] path/to/directory useradd useradd Create a new user. See also: users, userdel, usermod. More information: https://manned.org/useradd. - Create a new user: sudo useradd username - Create a new user with the specified user ID: sudo useradd [-u|--uid] id username - Create a new user with the specified shell: sudo useradd [-s|--shell] path/to/shell username - Create a new user belonging to additional groups (mind the lack of whitespace): sudo useradd [-G|--groups] group1,group2,... username - Create a new user with the default home directory: sudo useradd [-m|--create-home] username - Create a new user with the home directory filled by template directory files: sudo useradd [-k|--skel] path/to/template_directory [-m|--create-home] username - Create a new system user without the home directory: sudo useradd [-r|--system] username","title":"Apt"},{"location":"comandos/apt/#adduser","text":"adduser User addition utility. More information: https://manned.org/adduser. - Create a new user with a default home directory and prompt the user to set a password: adduser username - Create a new user without a home directory: adduser --no-create-home username - Create a new user with a home directory at the specified path: adduser --home path/to/home username - Create a new user with the specified shell set as the login shell: adduser --shell path/to/shell username - Create a new user belonging to the specified group: adduser --ingroup group username","title":"adduser"},{"location":"comandos/apt/#apt","text":"apt 2.6.1 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). Este APT tem Poderes de Super Vaca.","title":"apt"},{"location":"comandos/apt/#cd","text":"cd Change the current working directory. More information: https://manned.org/cd. - Go to the specified directory: cd path/to/directory - Go up to the parent of the current directory: cd .. - Go to the home directory of the current user: cd - Go to the home directory of the specified user: cd ~username - Go to the previously chosen directory: cd - - Go to the root directory: cd /","title":"cd"},{"location":"comandos/apt/#chgrp","text":"chgrp Change group ownership of files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/chgrp-invocation.html. - Change the owner group of a file/directory: chgrp group path/to/file_or_directory - Recursively change the owner group of a directory and its contents: chgrp [-R|--recursive] group path/to/directory - Change the owner group of a symbolic link: chgrp [-h|--no-dereference] group path/to/symlink - Change the owner group of a file/directory to match a reference file: chgrp --reference path/to/reference_file path/to/file_or_directory","title":"chgrp"},{"location":"comandos/apt/#chmod","text":"chmod Change the access permissions of a file or directory. More information: https://www.gnu.org/software/coreutils/manual/html_node/chmod-invocation.html. - Give the [u]ser who owns a file the right to e[x]ecute it: chmod u+x path/to/file - Give the [u]ser rights to [r]ead and [w]rite to a file/directory: chmod u+rw path/to/file_or_directory - Remove e[x]ecutable rights from the [g]roup: chmod g-x path/to/file - Give [a]ll users rights to [r]ead and e[x]ecute: chmod a+rx path/to/file - Give [o]thers (not in the file owner's group) the same rights as the [g]roup: chmod o=g path/to/file - Remove all rights from [o]thers: chmod o= path/to/file - Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite: chmod [-R|--recursive] g+w,o+w path/to/directory - Recursively give [a]ll users [r]ead permissions to files and e[X]ecute permissions to sub-directories within a directory: chmod [-R|--recursive] a+rX path/to/directory","title":"chmod"},{"location":"comandos/apt/#chown","text":"chown Change user and group ownership of files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/chown-invocation.html. - Change the owner user of a file/directory: chown user path/to/file_or_directory - Change the owner user and group of a file/directory: chown user:group path/to/file_or_directory - Change the owner user and group to both have the name user: chown user: path/to/file_or_directory - Recursively change the owner of a directory and its contents: chown [-R|--recursive] user path/to/directory - Change the owner of a symbolic link: chown [-h|--no-dereference] user path/to/symlink - Change the owner of a file/directory to match a reference file: chown --reference path/to/reference_file path/to/file_or_directory","title":"chown"},{"location":"comandos/apt/#cp","text":"cp Copy files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html. - Copy a file to another location: cp path/to/source_file.ext path/to/target_file.ext - Copy a file into another directory, keeping the filename: cp path/to/source_file.ext path/to/target_parent_directory - Recursively copy a directory's contents to another location (if the destination exists, the directory i> cp [-r|--recursive] path/to/source_directory path/to/target_directory - Copy a directory recursively, in verbose mode (shows files as they are copied): cp [-vr|--verbose --recursive] path/to/source_directory path/to/target_directory - Copy multiple files at once to a directory: cp [-t|--target-directory] path/to/destination_directory path/to/file1 path/to/file2 ... - Copy all files with a specific extension to another location, in interactive mode (prompts user before > cp [-i|--interactive] *.ext path/to/target_directory - Follow symbolic links before copying: cp [-L|--dereference] link path/to/target_directory - Use the full path of source files, creating any missing intermediate directories when copying: cp --parents source/path/to/file path/to/target_file","title":"cp"},{"location":"comandos/apt/#ls","text":"ls List directory contents. More information: https://www.gnu.org/software/coreutils/manual/html_node/ls-invocation.html. - List files one per line: ls -1 - List all files, including hidden files: ls [-a|--all] - List files with a trailing symbol to indicate file type (directory/, symbolic_link@, executable*, ...): ls [-F|--classify] - List all files in [l]ong format (permissions, ownership, size, and modification date): ls [-la|-l --all] - List files in [l]ong format with size displayed using human-readable units (KiB, MiB, GiB): ls [-lh|-l --human-readable] - List files in [l]ong format, sorted by [S]ize (descending) recursively: ls [-lSR|-lS --recursive] - List files in [l]ong format, sorted by [t]ime the file was modified and in reverse order (oldest first): ls [-ltr|-lt --reverse] - Only list directories: ls [-d|--directory] */","title":"ls"},{"location":"comandos/apt/#mkdir","text":"mkdir Create directories and set their permissions. More information: https://www.gnu.org/software/coreutils/manual/html_node/mkdir-invocation.html. - Create specific directories: mkdir path/to/directory1 path/to/directory2 ... - Create specific directories and their parents if needed: mkdir [-p|--parents] path/to/directory1 path/to/directory2 ... - Create directories with specific permissions: mkdir [-m|--mode] rwxrw-r-- path/to/directory1 path/to/directory2 ... - Create multiple nested directories recursively: mkdir [-p|--parents] {{path/to/{a,b}/{x,y,z}/{h,i,j}}}","title":"mkdir"},{"location":"comandos/apt/#rm","text":"rm Remove files or directories. See also: rmdir. More information: https://www.gnu.org/software/coreutils/manual/html_node/rm-invocation.html. - Remove specific files: rm path/to/file1 path/to/file2 ... - Remove specific files ignoring nonexistent ones: rm [-f|--force] path/to/file1 path/to/file2 ... - Remove specific files interactively prompting before each removal: rm [-i|--interactive] path/to/file1 path/to/file2 ... - Remove specific files printing info about each removal: rm [-v|--verbose] path/to/file1 path/to/file2 ... - Remove specific files and directories recursively: rm [-r|--recursive] path/to/file_or_directory1 path/to/file_or_directory2 ... - Remove empty directories (this is considered the safe method): rm [-d|--dir] path/to/directory","title":"rm"},{"location":"comandos/apt/#useradd","text":"useradd Create a new user. See also: users, userdel, usermod. More information: https://manned.org/useradd. - Create a new user: sudo useradd username - Create a new user with the specified user ID: sudo useradd [-u|--uid] id username - Create a new user with the specified shell: sudo useradd [-s|--shell] path/to/shell username - Create a new user belonging to additional groups (mind the lack of whitespace): sudo useradd [-G|--groups] group1,group2,... username - Create a new user with the default home directory: sudo useradd [-m|--create-home] username - Create a new user with the home directory filled by template directory files: sudo useradd [-k|--skel] path/to/template_directory [-m|--create-home] username - Create a new system user without the home directory: sudo useradd [-r|--system] username","title":"useradd"},{"location":"historicos/historico_2025-07-25/","text":"Hist\u00f3rico: 25/07/2025 pwd ls -a ls -A ls ls -a | nl ls -Fa | nl cat mkdocs.yml ls docs wc -l ./docs/index.md wc -l docs/index.md wc -l ./docs/index.md echo $LINES echo $COLUMNS cat docs/index.md echo > ./docs/index.md echo \"# In\u00edcio\" > ./docs/index.md echo # In\u00edcio > ./docs/index.md echo > ./docs/index.md echo # In\u00edcio > ./docs/index.md sudo apt install micro micro docs/index.md sudo apt install -y micro micro docs/index.md find find -type d find -name \"*.yml\" micro mkdocs.yml nano mkdocs.yml cat mkdocs.yml tree docs find docs tree docs find -type f docs find docs -type f apt echo \"# apt\" echo \"# apt\" > ./docs/apt.md apt apt >> ./docs/apt.md nano ./docs/apt.md mkdocs serve nano ./docs/apt.md mkdocs serve sudo apt install -y bat bat batcat ./docs/apt.md mkdocs mkdocs gh-deploy echo \u201c# mkdocs\u201d > ./docs/mkdocs.md\\nmkdocs >> ./docs/mkdocs.md\\necho \u201c# git\u201d > ./docs/git.md\\ngit >> ./docs/git.md echo \u201c# mkdocs\u201d > ./docs/mkdocs.md echo \"# mkdocs\" > ./docs/mkdocs.md mkdocs >> ./docs/mkdocs.md echo \"# git\" > ./docs/git.md git >> ./docs/git.md ls docs ls -1 docs git status git add . git status git commit -m \"Doc: apt, git e mkdocs\" git status git push mkdir docs/historicos echo \"# Hist\u00f3rico: 25/07/2025\" echo \"# Hist\u00f3rico: 25/07/2025\" > docs/historicos/historico_2025-07-25.md history history > docs/historicos/historico_2025-07-25.md","title":"Hist\u00f3rico: 25/07/2025"},{"location":"historicos/historico_2025-07-25/#historico-25072025","text":"pwd ls -a ls -A ls ls -a | nl ls -Fa | nl cat mkdocs.yml ls docs wc -l ./docs/index.md wc -l docs/index.md wc -l ./docs/index.md echo $LINES echo $COLUMNS cat docs/index.md echo > ./docs/index.md echo \"# In\u00edcio\" > ./docs/index.md echo # In\u00edcio > ./docs/index.md echo > ./docs/index.md echo # In\u00edcio > ./docs/index.md sudo apt install micro micro docs/index.md sudo apt install -y micro micro docs/index.md find find -type d find -name \"*.yml\" micro mkdocs.yml nano mkdocs.yml cat mkdocs.yml tree docs find docs tree docs find -type f docs find docs -type f apt echo \"# apt\" echo \"# apt\" > ./docs/apt.md apt apt >> ./docs/apt.md nano ./docs/apt.md mkdocs serve nano ./docs/apt.md mkdocs serve sudo apt install -y bat bat batcat ./docs/apt.md mkdocs mkdocs gh-deploy echo \u201c# mkdocs\u201d > ./docs/mkdocs.md\\nmkdocs >> ./docs/mkdocs.md\\necho \u201c# git\u201d > ./docs/git.md\\ngit >> ./docs/git.md echo \u201c# mkdocs\u201d > ./docs/mkdocs.md echo \"# mkdocs\" > ./docs/mkdocs.md mkdocs >> ./docs/mkdocs.md echo \"# git\" > ./docs/git.md git >> ./docs/git.md ls docs ls -1 docs git status git add . git status git commit -m \"Doc: apt, git e mkdocs\" git status git push mkdir docs/historicos echo \"# Hist\u00f3rico: 25/07/2025\" echo \"# Hist\u00f3rico: 25/07/2025\" > docs/historicos/historico_2025-07-25.md history history > docs/historicos/historico_2025-07-25.md","title":"Hist\u00f3rico: 25/07/2025"}]}