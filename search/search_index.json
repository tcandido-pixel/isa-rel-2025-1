{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"In\u00edcio Sou aluno do IFRN campus Parnamirim .","title":"In\u00edcio"},{"location":"#inicio","text":"Sou aluno do IFRN campus Parnamirim .","title":"In\u00edcio"},{"location":"apt/","text":"apt apt 2.8.3 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). This APT has Super Cow Powers.","title":"apt"},{"location":"apt/#apt","text":"apt 2.8.3 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). This APT has Super Cow Powers.","title":"apt"},{"location":"git/","text":"git usage: git [-v | --version] [-h | --help] [-C ] [-c = ] [--exec-path[= ]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch] [--no-optional-locks] [--no-advice] [--bare] [--git-dir= ] [--work-tree= ] [--namespace= ] [--config-env= = ] [ ] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history backfill Download missing objects in a partial clone branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help ' or 'git help ' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"git"},{"location":"git/#git","text":"usage: git [-v | --version] [-h | --help] [-C ] [-c = ] [--exec-path[= ]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch] [--no-optional-locks] [--no-advice] [--bare] [--git-dir= ] [--work-tree= ] [--namespace= ] [--config-env= = ] [ ] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history backfill Download missing objects in a partial clone branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help ' or 'git help ' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"git"},{"location":"mkdocs/","text":"mkdocs Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output --color / --no-color Force enable or disable color and wrapping for the output. Default is auto-detect. -h, --help Show this message and exit. Commands: build Build the MkDocs documentation get-deps Show required PyPI packages inferred from plugins in mkdocs.yml gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server","title":"mkdocs"},{"location":"mkdocs/#mkdocs","text":"Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output --color / --no-color Force enable or disable color and wrapping for the output. Default is auto-detect. -h, --help Show this message and exit. Commands: build Build the MkDocs documentation get-deps Show required PyPI packages inferred from plugins in mkdocs.yml gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server","title":"mkdocs"},{"location":"comandos/apt/","text":"apt apt 2.6.1 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). Este APT tem Poderes de Super Vaca. tldr apt Package manager for Debian-based distributions. Intended as a user-friendly alternative to apt-get for interactive use. For equivalent commands in other package managers, see https://wiki.archlinux.org/title/Pacman/Rosetta. More information: https://manned.org/apt.8. - Update the list of available packages and versions (recommended before running other apt commands): sudo apt update - Search packages by name or description: apt search package - Search packages by name only (supports wildcards like *): apt list package - Show detailed information about a package: apt show package - Install a package, or update it to the latest version: sudo apt install package - Remove a package (use purge instead to also remove configuration files): sudo apt remove package - Upgrade all installed packages to their latest versions: sudo apt upgrade - List all installed packages: apt list [-i|--installed] cp cp Copy files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html. - Copy a file to another location: cp path/to/source_file.ext path/to/target_file.ext - Copy a file into another directory, keeping the filename: cp path/to/source_file.ext path/to/target_parent_directory - Recursively copy a directory's contents to another location (if the destination exists, the directory i> cp [-r|--recursive] path/to/source_directory path/to/target_directory - Copy a directory recursively, in verbose mode (shows files as they are copied): cp [-vr|--verbose --recursive] path/to/source_directory path/to/target_directory - Copy multiple files at once to a directory: cp [-t|--target-directory] path/to/destination_directory path/to/file1 path/to/file2 ... - Copy all files with a specific extension to another location, in interactive mode (prompts user before > cp [-i|--interactive] *.ext path/to/target_directory - Follow symbolic links before copying: cp [-L|--dereference] link path/to/target_directory - Use the full path of source files, creating any missing intermediate directories when copying: cp --parents source/path/to/file path/to/target_file","title":"apt"},{"location":"comandos/apt/#apt","text":"apt 2.6.1 (amd64) Usage: apt [options] command apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings See apt(8) for more information about the available commands. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). Este APT tem Poderes de Super Vaca.","title":"apt"},{"location":"comandos/apt/#tldr","text":"apt Package manager for Debian-based distributions. Intended as a user-friendly alternative to apt-get for interactive use. For equivalent commands in other package managers, see https://wiki.archlinux.org/title/Pacman/Rosetta. More information: https://manned.org/apt.8. - Update the list of available packages and versions (recommended before running other apt commands): sudo apt update - Search packages by name or description: apt search package - Search packages by name only (supports wildcards like *): apt list package - Show detailed information about a package: apt show package - Install a package, or update it to the latest version: sudo apt install package - Remove a package (use purge instead to also remove configuration files): sudo apt remove package - Upgrade all installed packages to their latest versions: sudo apt upgrade - List all installed packages: apt list [-i|--installed]","title":"tldr"},{"location":"comandos/apt/#cp","text":"cp Copy files and directories. More information: https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html. - Copy a file to another location: cp path/to/source_file.ext path/to/target_file.ext - Copy a file into another directory, keeping the filename: cp path/to/source_file.ext path/to/target_parent_directory - Recursively copy a directory's contents to another location (if the destination exists, the directory i> cp [-r|--recursive] path/to/source_directory path/to/target_directory - Copy a directory recursively, in verbose mode (shows files as they are copied): cp [-vr|--verbose --recursive] path/to/source_directory path/to/target_directory - Copy multiple files at once to a directory: cp [-t|--target-directory] path/to/destination_directory path/to/file1 path/to/file2 ... - Copy all files with a specific extension to another location, in interactive mode (prompts user before > cp [-i|--interactive] *.ext path/to/target_directory - Follow symbolic links before copying: cp [-L|--dereference] link path/to/target_directory - Use the full path of source files, creating any missing intermediate directories when copying: cp --parents source/path/to/file path/to/target_file","title":"cp"},{"location":"historicos/historico_2025-07-25/","text":"Hist\u00f3rico: 25/07/2025 pwd ls -a ls -A ls ls -a | nl ls -Fa | nl cat mkdocs.yml ls docs wc -l ./docs/index.md wc -l docs/index.md wc -l ./docs/index.md echo $LINES echo $COLUMNS cat docs/index.md echo > ./docs/index.md echo \"# In\u00edcio\" > ./docs/index.md echo # In\u00edcio > ./docs/index.md echo > ./docs/index.md echo # In\u00edcio > ./docs/index.md sudo apt install micro micro docs/index.md sudo apt install -y micro micro docs/index.md find find -type d find -name \"*.yml\" micro mkdocs.yml nano mkdocs.yml cat mkdocs.yml tree docs find docs tree docs find -type f docs find docs -type f apt echo \"# apt\" echo \"# apt\" > ./docs/apt.md apt apt >> ./docs/apt.md nano ./docs/apt.md mkdocs serve nano ./docs/apt.md mkdocs serve sudo apt install -y bat bat batcat ./docs/apt.md mkdocs mkdocs gh-deploy echo \u201c# mkdocs\u201d > ./docs/mkdocs.md\\nmkdocs >> ./docs/mkdocs.md\\necho \u201c# git\u201d > ./docs/git.md\\ngit >> ./docs/git.md echo \u201c# mkdocs\u201d > ./docs/mkdocs.md echo \"# mkdocs\" > ./docs/mkdocs.md mkdocs >> ./docs/mkdocs.md echo \"# git\" > ./docs/git.md git >> ./docs/git.md ls docs ls -1 docs git status git add . git status git commit -m \"Doc: apt, git e mkdocs\" git status git push mkdir docs/historicos echo \"# Hist\u00f3rico: 25/07/2025\" echo \"# Hist\u00f3rico: 25/07/2025\" > docs/historicos/historico_2025-07-25.md history history > docs/historicos/historico_2025-07-25.md","title":"Hist\u00f3rico: 25/07/2025"},{"location":"historicos/historico_2025-07-25/#historico-25072025","text":"pwd ls -a ls -A ls ls -a | nl ls -Fa | nl cat mkdocs.yml ls docs wc -l ./docs/index.md wc -l docs/index.md wc -l ./docs/index.md echo $LINES echo $COLUMNS cat docs/index.md echo > ./docs/index.md echo \"# In\u00edcio\" > ./docs/index.md echo # In\u00edcio > ./docs/index.md echo > ./docs/index.md echo # In\u00edcio > ./docs/index.md sudo apt install micro micro docs/index.md sudo apt install -y micro micro docs/index.md find find -type d find -name \"*.yml\" micro mkdocs.yml nano mkdocs.yml cat mkdocs.yml tree docs find docs tree docs find -type f docs find docs -type f apt echo \"# apt\" echo \"# apt\" > ./docs/apt.md apt apt >> ./docs/apt.md nano ./docs/apt.md mkdocs serve nano ./docs/apt.md mkdocs serve sudo apt install -y bat bat batcat ./docs/apt.md mkdocs mkdocs gh-deploy echo \u201c# mkdocs\u201d > ./docs/mkdocs.md\\nmkdocs >> ./docs/mkdocs.md\\necho \u201c# git\u201d > ./docs/git.md\\ngit >> ./docs/git.md echo \u201c# mkdocs\u201d > ./docs/mkdocs.md echo \"# mkdocs\" > ./docs/mkdocs.md mkdocs >> ./docs/mkdocs.md echo \"# git\" > ./docs/git.md git >> ./docs/git.md ls docs ls -1 docs git status git add . git status git commit -m \"Doc: apt, git e mkdocs\" git status git push mkdir docs/historicos echo \"# Hist\u00f3rico: 25/07/2025\" echo \"# Hist\u00f3rico: 25/07/2025\" > docs/historicos/historico_2025-07-25.md history history > docs/historicos/historico_2025-07-25.md","title":"Hist\u00f3rico: 25/07/2025"}]}